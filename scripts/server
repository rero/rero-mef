#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO MEF
# Copyright (C) 2020 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`

set -e

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

# Displays program name
PROGRAM=`basename $0`
msg "PROGRAM: ${PROGRAM}"

PORT=5000
HTTP=false

if ! options=$(getopt -o np: -l non_secure,port: -- "$@")
then
  # something went wrong, getopt will put out an error message for us
  exit 1
fi

while [ $# -gt 0 ]
do
  case $1 in
    -n|--non_secure) HTTP=true;;
    -p|--port) PORT=$2; shift;;
    (--) shift; break;;
    (-*) error_msg+exit "$0: Unrecognized option $1";;
  esac
  shift
done

set -e

script_path=$(dirname "$0")
# poetry is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  error_msg+exit "Error - Launch this script via poetry command:\n\tpoetry run ${PROGRAM}"
fi

export FLASK_DEBUG=True
export FLASK_ENV=development
# Start Worker and Server
celery --app=rero_mef.celery worker --autoscale=4,1 --beat -l INFO --without-heartbeat --purge & pid_celery=$!

if ${HTTP}
then
  info_msg "Server is running on http://localhost:${PORT}"
  invenio run -p $PORT & pid_server=$!
else
  info_msg "Server is running on https://localhost:${PORT}"
  invenio run \
     --cert "$script_path"/../docker/nginx/test.crt \
     --key "$script_path"/../docker/nginx/test.key \
     -p $PORT & pid_server=$!
fi

trap 'kill $pid_celery $pid_server &>/dev/null' EXIT

wait $pid_celery $pid_server
