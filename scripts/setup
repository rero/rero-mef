#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# This file is part of RERO MEF.
# Copyright (C) 2018 RERO.
#
# RERO MEF is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# RERO MEF is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with RERO MEF; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
# In applying this license, RERO does not
# waive the privileges and immunities granted to it by virtue of its status
# as an Intergovernmental Organization or submit itself to any jurisdiction.

# COLORS for messages
NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

set -e

# POETRY is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  error_msg+exit "Error - Launch this script via poetry command:\n\tpoetry run ${PROGRAM}"
fi

function db_init () {
    # Purge celery
    celery -A rero_mef.celery purge -f
    # Clean redis
    invenio utils flush_cache --yes-i-know || true
    invenio db destroy --yes-i-know || true
    invenio db init create
    invenio index destroy --force --yes-i-know || true
    invenio index init --force
    invenio index queue init purge

    # Create admin role to rectict access
    invenio roles create admin
    invenio access allow superuser-access role admin
}

function oai_init () {
    # init oaiharvester config from file
    invenio oaiharvester initconfig ./data/oaisources.yml
    # we got the last gnd files on 10 2020 from here:
    # https://data.dnb.de/GND/
    invenio oaiharvester set_last_run -n gnd -d 2020-06-21
    # we got the last idref files on 10 2020 with:
    # invenio oaiharvester save idref.mrc -n idref -f 1990-01-01
    invenio oaiharvester set_last_run -n idref -d 2020-10-01
}

function sample_load () {
    for AGENCY in viaf rero gnd idref
    do
       info_msg "Importing ${AGENCY} records:"
       dojson -i ./data/${AGENCY}.json schema "http://mef.rero.ch/schemas/${AGENCY}/${AGENCY}-contribution-v0.0.1.json" | invenio fixtures create_or_update ${AGENCY}
    done
    oai_init
}

function deploy () {
    INPUT_DIR=$1
    # Load agencies CSV files to db
    for AGENCY in rero gnd idref viaf mef
    do
        invenio fixtures bulk_load ${AGENCY} ${INPUT_DIR} ${INPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv --verbose --reindex
        invenio utils runindex --raise-on-error --concurrency 4 --delayed
    done
    oai_init
    invenio utils runindex --raise-on-error
    invenio utils agency_counts
}

function create_json () {
    INPUT_DIR=$1
    OUTPUT_DIR=$2
    # Transform marc files to json
    for AGENCY in rero gnd idref
    do
        invenio fixtures bulk_load ${AGENCY} ${INPUT_DIR} ${OUTPUT_DIR} --marc_file ${AGENCY}.mrc --json_file ${AGENCY}.json &
    done
    wait
}

function create_csv () {
    OUTPUT_DIR=$1
    # Create CSV files from json
    for AGENCY in rero gnd idref
    do
        invenio fixtures bulk_load ${AGENCY} ${OUTPUT_DIR} ${OUTPUT_DIR} --json_file ${AGENCY}.json --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv &
    done
    wait
    # Create viaf CSV files from viaf.txt
    invenio fixtures bulk_load viaf ${INPUT_DIR} ${OUTPUT_DIR} --json_file viaf.txt --csv_pidstore_file viaf_pidstore.csv --csv_metadata_file viaf_metadata.csv --verbose
    # Create mef CSV files from viaf_metadata.csv
    invenio fixtures bulk_load mef ${OUTPUT_DIR} ${OUTPUT_DIR} --json_file viaf_metadata.csv --csv_pidstore_file mef_pidstore.csv --csv_metadata_file mef_metadata.csv --verbose
}

function bulk_load () {
    INPUT_DIR=$1
    OUTPUT_DIR=$2
    # Transform marc files to json
    create_json ${INPUT_DIR} ${OUTPUT_DIR}

    # Create CSV files from json
    create_csv ${OUTPUT_DIR}

    db_init
    # Load CSV files to db
    deploy ${OUTPUT_DIR}
}

function usage () {
    msg "Usage: "
    msg " [./scripts/setup]"
    msg "    Load prepared json files available in git/data"
    msg " "
    msg " [./scripts/setup --db_init]"
    msg " "
    msg " [./scripts/setup --deploy INPUT_DIR]"
    msg "    INPUT_DIR where csv files are found. "
    msg " "
    msg " [./scripts/setup --bulk_load INPUT_DIR OUTPUT_DIR]"
    msg "    INPUT_DIR where marc files are found. "
    msg "    OUTPUT_DIR directory for output file"
    msg " "
    msg " [./scripts/setup --create_json INPUT_DIR OUTPUT_DIR]"
    msg "    INPUT_DIR where marc files are found. "
    msg "    OUTPUT_DIR directory for output file"
    msg " "
    msg " [./scripts/setup --create_csv INPUT_OUTPUT_DIR]"
    msg "    INPUT_OUTPUT_DIR directory for input and output file"
}

if [[ $# -eq 0 ]] ; then
    info_msg "Start sample loading of all types of agencies"
    db_init
    sample_load
else
    case $1 in
        '--db_init')
            info_msg "DB init"
            db_init
            ;;
        '--oai_init')
            info_msg "OAI init"
            oai_init
            ;;
        '--deploy')
            info_msg "Start loading CSV records to database for all agencies"
            if [ -z "$2" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 1
            else
                db_init
                deploy $2
            fi
            ;;
        '--bulk_load')
            info_msg "Start bulk loading of all types of agencies"
            if [ -z "$2" ] || [ -z "$3" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                bulk_load $2 $3
            fi
            ;;
        '--create_json')
            info_msg "Start creating json for all types of agencies"
            if [ -z "$2" ] || [ -z "$3" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                create_json $2 $3
            fi
            ;;
        '--create_csv')
            info_msg "Start creating csv for all types of agencies"
            if [ -z "$2" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                create_csv $2
            fi
            ;;
        '--help')
                usage
            ;;
        *)
            error_msg "Invalid input arguments. "
            usage
            exit 4
            ;;
    esac
fi

success_msg "${PROGRAM} finished!"
exit 0
