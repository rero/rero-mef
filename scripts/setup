#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# RERO MEF
# Copyright (C) 2024 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# COLORS for messages
NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

set -e

# POETRY is a mandatory condition to launch this program!
if [[ -z "${VIRTUAL_ENV}" ]]; then
  error_msg+exit "Error - Launch this script via poetry command:\n\tpoetry run ${PROGRAM}"
fi

function db_init () {
    info_msg "DB init"
    # Purge celery
    celery -A rero_mef.celery purge -f
    # Clean redis
    invenio utils flush-cache --yes-i-know || true
    invenio db destroy --yes-i-know || true
    invenio db init create
    invenio index destroy --force --yes-i-know || true
    invenio index init --force
    invenio index queue init purge

    # Create roles to rectict access
    invenio roles create admin
    invenio access allow superuser-access role admin
    # create new admin user
    invenio users create -a admin@rero.ch --password administrator
    invenio users confirm admin@rero.ch
    invenio roles create -d 'Admins Group' admins
    invenio access allow admin-access role admins
    invenio roles add admin@rero.ch admins
    # create new monitoring user
    invenio roles create -d 'Monitoring Group' monitoring
    invenio users create -a monitoring@rero.ch --password monitor
    invenio roles add admin@rero.ch monitoring
    invenio roles add monitoring@rero.ch monitoring
    if [ -z ${INVENIO_RERO_ACCESS_TOKEN_MONITORING} ]
    then
        invenio utils tokens_create -n monitoring -u monitoring@rero.ch
    else
        invenio utils tokens_create -n monitoring -u monitoring@rero.ch -t ${INVENIO_RERO_ACCESS_TOKEN_MONITORING}
    fi
}

function oai_init () {
    info_msg "OAI init"
    # init oaiharvester config from file
    invenio oaiharvester initconfig ./data/oaisources.yml
    # https://data.dnb.de/GND/
    invenio oaiharvester set-last-run -n agents.gnd -d 2023-08-01
    invenio oaiharvester set-last-run -n agents.idref -d 2023-08-01
    invenio oaiharvester set-last-run -n concepts.idref -d 2023-08-01
    invenio oaiharvester set-last-run -n concepts.gnd -d 2023-08-01
    invenio oaiharvester set-last-run -n places.idref -d 2023-08-01
    invenio oaiharvester set-last-run -n places.gnd -d 2023-08-01
}

function sample_load () {
    SCHEMA="http://mef.rero.ch/schemas/viaf/viaf-v0.0.1.json"
    info_msg "Importing VIAF records:"
    dojson -i ./data/viaf.json | invenio fixtures create-or-update viaf -v

    for ENTITY in aggnd aidref agrero
    do
      info_msg "Importing ${ENTITY} records:"
      dojson -i ./data/${ENTITY}.json | invenio fixtures create-or-update ${ENTITY} -v
    done

    for ENTITY in corero cidref cognd
    do
      info_msg "Importing ${ENTITY} concept records:"
      dojson -i ./data/${ENTITY}.json | invenio fixtures create-or-update ${ENTITY} -v
    done

    for ENTITY in pidref plgnd
    do
      info_msg "Importing ${ENTITY} place records:"
      dojson -i ./data/${ENTITY}.json | invenio fixtures create-or-update ${ENTITY} -v
    done
    oai_init
}

function deploy () {
    INPUT_DIR=$1
    info_msg "Start loading CSV records to database: ${INPUT_DIR}"
    # Load CSV files to db
    for ENTITY in aggnd aidref agrero viaf corero cidref cognd pidref plgnd
    do
        invenio fixtures load-csv ${ENTITY} ${INPUT_DIR}/${ENTITY}_pidstore.csv ${INPUT_DIR}/${ENTITY}_metadata.csv --verbose --reindex
    done
    invenio fixtures load-csv mef ${INPUT_DIR}/mef_pidstore.csv ${INPUT_DIR}/mef_metadata.csv --ids_file ${INPUT_DIR}/mef_id.csv --verbose --reindex
    invenio fixtures load-csv comef ${INPUT_DIR}/comef_pidstore.csv ${INPUT_DIR}/comef_metadata.csv --ids_file ${INPUT_DIR}/comef_id.csv --verbose --reindex
    invenio fixtures load-csv plmef ${INPUT_DIR}/plmef_pidstore.csv ${INPUT_DIR}/plmef_metadata.csv --ids_file ${INPUT_DIR}/plmef_id.csv --verbose --reindex
    oai_init
    invenio utils runindex --raise-on-error --concurrency 8 --delayed
    invenio utils runindex --raise-on-error
    # invenio utils reindex-missing -v
}

function create_json () {
    INPUT_DIR=$1
    OUTPUT_DIR=$2
    info_msg "Start creating json: ${INPUT_DIR} ${OUTPUT_DIR}"
    # Transform MARC files to json
    for ENTITY in aggnd aidref agrero corero cidref cognd pidref plgnd
    do
        invenio fixtures marc-to-json ${ENTITY} ${INPUT_DIR}/${ENTITY}.mrc ${OUTPUT_DIR}/${ENTITY}.json --error_file ${OUTPUT_DIR}/${ENTITY}_error.mrc &
    done
    trap 'jobs -p | xargs kill' EXIT
    wait
}

function create_csv () {
    OUTPUT_DIR=$1
    info_msg "Start creating csv: ${OUTPUT_DIR}"
    # Create CSV files from json
    for ENTITY in aggnd aidref agrero corero cidref cognd pidref plgnd
    do
        invenio fixtures create-csv ${ENTITY} ${OUTPUT_DIR}/${ENTITY}.json ${OUTPUT_DIR}
    done
    # trap 'jobs -p | xargs kill' EXIT
    # wait
    info_msg "Create VIAF CSV files from viaf.txt: ${OUTPUT_DIR}"
    # Create VIAF CSV files from viaf.txt
    invenio agents create-csv-viaf ${OUTPUT_DIR}/viaf.txt ${OUTPUT_DIR}

    info_msg "Create MEF CSV files from viaf_pidstore.csv: ${OUTPUT_DIR}"
    # Create MEF CSV files from viaf_metadata.csv
    invenio agents create-csv-mef ${OUTPUT_DIR}/viaf_metadata.csv ${OUTPUT_DIR}
}

function create_and_load () {
    INPUT_DIR=$1
    OUTPUT_DIR=$2
    # Transform MARC files to json
    create_json ${INPUT_DIR} ${OUTPUT_DIR}

    # Create CSV files from json
    create_csv ${OUTPUT_DIR}

    db_init
    # Load CSV files to db
    deploy ${OUTPUT_DIR}
}

function viaf_init () {
    INPUT_DIR=$1
    info_msg "Start loading from VIAF file: ${INPUT_DIR}"
    db_init
    oai_init
    ENTITY=viaf
    invenio fixtures load-csv viaf ${INPUT_DIR}/viaf_pidstore.csv ${INPUT_DIR}/viaf_metadata.csv --verbose --reindex
    invenio utils runindex --raise-on-error --concurrency 8 --delayed
    invenio utils runindex --raise-on-error
    invenio agents create-from-viaf --online aggnd --online aidref --online agrero --progress
}

function usage () {
    msg "Usage: "
    msg " [./scripts/setup]"
    msg "    Load prepared JSON files available in git/data"
    msg " "
    msg " [./scripts/setup --db_init]"
    msg " "
    msg " [./scripts/setup --deploy INPUT_DIR]"
    msg "    INPUT_DIR where CSV files are found. "
    msg " "
    msg " [./scripts/setup --create_and_load INPUT_DIR OUTPUT_DIR]"
    msg "    INPUT_DIR where MARC files are found. "
    msg "    OUTPUT_DIR directory for output file"
    msg " "
    msg " [./scripts/setup --create_json INPUT_DIR OUTPUT_DIR]"
    msg "    INPUT_DIR where MARC files are found. "
    msg "    OUTPUT_DIR directory for output file"
    msg " "
    msg " [./scripts/setup --create_csv INPUT_OUTPUT_DIR]"
    msg "    INPUT_OUTPUT_DIR directory for input and output file"
    msg " "
    msg " [./scripts/setup --viaf_init INPUT_DIR]"
    msg "    INPUT_DIR directory for VIAF CSV files"

}

if [[ $# -eq 0 ]] ; then
    info_msg "Start sample loading of all types of entities"
    db_init
    sample_load
else
    case $1 in
        '--db_init')
            db_init
            ;;
        '--oai_init')
            oai_init
            ;;
        '--deploy')
            if [ -z "$2" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 1
            else
                db_init
                deploy $2
            fi
            ;;
        '--create_and_load')
            if [ -z "$2" ] || [ -z "$3" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                create_and_load $2 $3
            fi
            ;;
        '--create_json')
            if [ -z "$2" ] || [ -z "$3" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                create_json $2 $3
            fi
            ;;
        '--create_csv')
            if [ -z "$2" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                create_csv $2
            fi
            ;;
        '--viaf_init')
            if [ -z "$2" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                viaf_init $2
            fi
            ;;
        '--help')
                usage
            ;;
        *)
            error_msg "Invalid input arguments. "
            usage
            exit 4
            ;;
    esac
fi

success_msg "${PROGRAM} finished"
exit 0
