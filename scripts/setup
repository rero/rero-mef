#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# This file is part of RERO MEF.
# Copyright (C) 2018 RERO.
#
# RERO MEF is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# RERO MEF is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with RERO MEF; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
# In applying this license, RERO does not
# waive the privileges and immunities granted to it by virtue of its status
# as an Intergovernmental Organization or submit itself to any jurisdiction.

set -e
RED='\033[0;31m'
GREEN='\033[0;0;32m'
NC='\033[0m' # No Color

function db_init () {
    # Purge celery
    pipenv run celery purge -A invenio_app.celery -f
    # Clean redis
    pipenv run invenio shell --no-term-title -c "import redis; redis.StrictRedis.from_url(app.config['CACHE_REDIS_URL']).flushall(); print('Cache cleared')"
    pipenv run invenio db destroy --yes-i-know || true
    pipenv run invenio db init create
    pipenv run invenio index destroy --force --yes-i-know || true
    pipenv run invenio index init --force
    pipenv run invenio index queue init purge

    # Create admin role to rectict access
    pipenv run invenio roles create admin
    pipenv run invenio access allow superuser-access role admin
}

function sample_load () {
    data_path=$(pipenv --where)/data
    # Attention: Must load viaf first

    for AGENCY in viaf bnf gnd rero
    do
       echo -e ${GREEN}Importing ${AGENCY} records:${NC}
       pipenv run dojson -i ${data_path}/${AGENCY}.json schema http://mef.test.rero.ch/schemas/authorities/${AGENCY}-person-v0.0.1.json | pipenv run invenio records create_or_update ${AGENCY}
       pipenv run invenio index reindex --yes-i-know --pid-type ${AGENCY}
    done
    pipenv run invenio index run -c 4
}

function bulk_load () {
    INPUT_DIR=$1
    OUTPUT_DIR=$2
    # Transform marc files to json
    for AGENCY in rero bnf gnd
    do
        pipenv run invenio records bulk_load ${AGENCY} ${INPUT_DIR} ${OUTPUT_DIR} --marc_file ${AGENCY}.mrc --json_file ${AGENCY}.json
    done
    # Create CSV files from json
    for AGENCY in rero bnf gnd
    do
        pipenv run invenio records bulk_load ${AGENCY} ${OUTPUT_DIR} ${OUTPUT_DIR} --json_file ${AGENCY}.json --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv
    done
    # Load CSV files to db
    for AGENCY in rero bnf gnd
    do
        pipenv run invenio records bulk_load ${AGENCY} ${OUTPUT_DIR} ${OUTPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv  --reindex --verbose
        pipenv run invenio index run -c 4 -d
    done
    # Create CSV files from json
    for AGENCY in mef viaf
    do
        pipenv run invenio records bulk_load ${AGENCY} ${INPUT_DIR} ${OUTPUT_DIR} --json_file viaf.txt --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv --rero_pids rero.pids
    done
    # Load CSV files to db
    for AGENCY in mef viaf
    do
        pipenv run invenio records bulk_load ${AGENCY} ${OUTPUT_DIR} ${OUTPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv  --reindex --verbose
        pipenv run invenio index run -c 4 -d
    done
}

function deploy () {
    INPUT_DIR=$1
    # Load agencies CSV files to db
    for AGENCY in rero bnf gnd mef
    do
        pipenv run invenio records bulk_load ${AGENCY} ${INPUT_DIR} ${INPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv --reindex --verbose
        pipenv run invenio index run -c 4 -d
    done
    echo -e ${GREEN}"For faster indexing disable ES auto refresh:"${NC}
    echo "curl -X PUT \"localhost:29200/_settings\" -H 'Content-Type: application/json' -d '{\"index\" : {\"refresh_interval\" : \"-1\"}}'"
    echo -e ${GREEN}"After indexing reenable ES auto refresh:"${NC}
    echo "curl -X PUT \"localhost:29200/_settings\" -H 'Content-Type: application/json' -d'{\"index\" : {\"refresh_interval\" : null}}'"
}

function deploy-viaf () {
    INPUT_DIR=$1
    # Load viaf CSV files to db
    AGENCY=viaf
    pipenv run invenio records bulk_load ${AGENCY} ${INPUT_DIR} ${INPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv --reindex --verbose
    pipenv run invenio index run -c 4 -d
    echo -e ${GREEN}"For faster indexing disable ES auto refresh:"${NC}
    echo "curl -X PUT \"localhost:29200/_settings\" -H 'Content-Type: application/json' -d '{\"index\" : {\"refresh_interval\" : \"-1\"}}'"
    echo -e ${GREEN}"After indexing reenable ES auto refresh:"${NC}
    echo "curl -X PUT \"localhost:29200/_settings\" -H 'Content-Type: application/json' -d'{\"index\" : {\"refresh_interval\" : null}}'"
}


function usage () {
    echo "Usage: "
    echo " [./scripts/setup]                    Load prepared json files available in git/data"
    echo " "
    echo " [./scripts/setup --deploy INPUT_DIR]"
    echo "                                       INPUT_DIR where csv files are found. "
    echo " [./scripts/setup --deploy-viaf INPUT_DIR]"
    echo "                                       INPUT_DIR where viaf csv files are found. "
    echo " "
    echo " [./scripts/setup --bulk_load INPUT_DIR OUTPUT_DIR]"
    echo "                                       INPUT_DIR where marc files are found. "
    echo "                                       OUTPUT_DIR directory for output file"
}

if [[ $# -eq 0 ]] ; then
    echo "Start sample loading of all types of agencies"
    db_init
    sample_load
else
    case $1 in
        '--deploy')
            echo "Start loading CSV records to database for all agencies"
            if [ -z "$2" ]; then
                echo "Invalid input arguments. "
                usage
                exit
            else
                db_init
                deploy $2
            fi
            ;;
        '--deploy-viaf')
            echo "Start loading CSV records to database for viaf agencie"
            if [ -z "$2" ]; then
                echo "Invalid input arguments. "
                usage
                exit
            else
                deploy-viaf $2
            fi
            ;;

        '--bulk_load')
            echo "Start bulk loading of all types of agencies"
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo "Invalid input arguments. "
                usage
                exit
            else
                db_init
                bulk_load $2 $3
            fi
            ;;
        '--help')
                usage
            ;;
        *)
            echo "Invalid input arguments. "
            usage
            ;;
    esac
fi
