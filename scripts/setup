#!/usr/bin/env bash
# -*- coding: utf-8 -*-
#
# This file is part of RERO MEF.
# Copyright (C) 2018 RERO.
#
# RERO MEF is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# RERO MEF is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with RERO MEF; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
# In applying this license, RERO does not
# waive the privileges and immunities granted to it by virtue of its status
# as an Intergovernmental Organization or submit itself to any jurisdiction.

# COLORS for messages
NC='\033[0m'                    # Default color
INFO_COLOR='\033[1;97;44m'      # Bold + white + blue background
SUCCESS_COLOR='\033[1;97;42m'   # Bold + white + green background
ERROR_COLOR='\033[1;97;41m'     # Bold + white + red background

PROGRAM=`basename $0`

# MESSAGES
msg() {
  echo -e "${1}" 1>&2
}
# Display a colored message
# More info: https://misc.flogisoft.com/bash/tip_colors_and_formatting
# $1: choosen color
# $2: title
# $3: the message
colored_msg() {
  msg "${1}[${2}]: ${3}${NC}"
}

info_msg() {
  colored_msg "${INFO_COLOR}" "INFO" "${1}"
}

error_msg() {
  colored_msg "${ERROR_COLOR}" "ERROR" "${1}"
}

error_msg+exit() {
    error_msg "${1}" && exit 1
}

success_msg() {
  colored_msg "${SUCCESS_COLOR}" "SUCCESS" "${1}"
}

set -e

function db_init () {
    # Purge celery
    pipenv run celery purge -A invenio_app.celery -f
    # Clean redis
    pipenv run invenio shell --no-term-title -c "import redis; redis.StrictRedis.from_url(app.config['CACHE_REDIS_URL']).flushall(); print('Cache cleared')"
    pipenv run invenio db destroy --yes-i-know || true
    pipenv run invenio db init create
    pipenv run invenio index destroy --force --yes-i-know || true
    pipenv run invenio index init --force
    pipenv run invenio index queue init purge

    # Create admin role to rectict access
    pipenv run invenio roles create admin
    pipenv run invenio access allow superuser-access role admin
}

function oai_init () {
    data_path=$(pipenv --where)/data
    # init oaiharvester config from file
    pipenv run invenio oaiharvester initconfig ${data_path}/oaisources.yml
    # pipenv run invenio oaiharvester harvest -n idref -q
}

function sample_load () {
    data_path=$(pipenv --where)/data

    for AGENCY in viaf rero bnf gnd idref
    do
       info_msg "Importing ${AGENCY} records:"
       pipenv run dojson -i ${data_path}/${AGENCY}.json schema http://mef.rero.ch/schemas/${AGENCY}/${AGENCY}-person-v0.0.1.json | pipenv run invenio fixtures create_or_update ${AGENCY}
    done
    oai_init
}

function bulk_load () {
    INPUT_DIR=$1
    OUTPUT_DIR=$2
    # Transform marc files to json
    for AGENCY in rero bnf gnd idref
    do
        pipenv run invenio fixtures bulk_load ${AGENCY} ${INPUT_DIR} ${OUTPUT_DIR} --marc_file ${AGENCY}.mrc --json_file ${AGENCY}.json
    done
    # Create CSV files from json
    for AGENCY in rero bnf gnd idref
    do
        pipenv run invenio fixtures bulk_load ${AGENCY} ${OUTPUT_DIR} ${OUTPUT_DIR} --json_file ${AGENCY}.json --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv
    done
    # Load CSV files to db
    for AGENCY in rero bnf gnd idref
    do
        pipenv run invenio fixtures bulk_load ${AGENCY} ${OUTPUT_DIR} ${OUTPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv --verbose --reindex
        pipenv run invenio utils runindex  --raise-on-error
    done
    # Create CSV files from json
    for AGENCY in mef viaf
    do
        pipenv run invenio fixtures bulk_load ${AGENCY} ${INPUT_DIR} ${OUTPUT_DIR} --json_file viaf.txt --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv --rero_pids rero.pids
    done
    # Load CSV files to db
    for AGENCY in mef viaf
    do
        pipenv run invenio fixtures bulk_load ${AGENCY} ${OUTPUT_DIR} ${OUTPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv  --verbose --reindex
        pipenv run invenio utils runindex  --raise-on-error  --concurrency 8 --delayed
    done
    oai_init
}

function deploy () {
    INPUT_DIR=$1
    # Load agencies CSV files to db
    for AGENCY in rero bnf gnd idref mef viaf
    do
        pipenv run invenio fixtures bulk_load ${AGENCY} ${INPUT_DIR} ${INPUT_DIR} --load_records --csv_pidstore_file ${AGENCY}_pidstore.csv --csv_metadata_file ${AGENCY}_metadata.csv --verbose --reindex
    done
    # Index agency records
    info_msg "For faster indexing disable ES auto refresh:"
    msg "curl -X PUT \"localhost:29200/_settings\" -H 'Content-Type: application/json' -d '{\"index\" : {\"refresh_interval\" : \"-1\"}}'"
    pipenv run invenio utils runindex --raise-on-error --concurrency 8 --delayed
    info_msg "After indexing reenable ES auto refresh:"
    msg "curl -X PUT \"localhost:29200/_settings\" -H 'Content-Type: application/json' -d'{\"index\" : {\"refresh_interval\" : null}}'"
    oai_init
}


function usage () {
    msg "Usage: "
    msg " [./scripts/setup]"
    msg "    Load prepared json files available in git/data"
    msg " "
    msg " [./scripts/setup --deploy INPUT_DIR]"
    msg "    INPUT_DIR where csv files are found. "
    msg " "
    msg " [./scripts/setup --bulk_load INPUT_DIR OUTPUT_DIR]"
    msg "    INPUT_DIR where marc files are found. "
    msg "    OUTPUT_DIR directory for output file"
}

if [[ $# -eq 0 ]] ; then
    info_msg "Start sample loading of all types of agencies"
    db_init
    sample_load
else
    case $1 in
        '--deploy')
            info_msg "Start loading CSV records to database for all agencies"
            if [ -z "$2" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 1
            else
                db_init
                deploy $2
            fi
            ;;
        '--bulk_load')
            info_msg "Start bulk loading of all types of agencies"
            if [ -z "$2" ] || [ -z "$3" ]; then
                error_msg "Invalid input arguments. "
                usage
                exit 3
            else
                db_init
                bulk_load $2 $3
            fi
            ;;
        '--help')
                usage
            ;;
        *)
            error_msg "Invalid input arguments. "
            usage
            exit 4
            ;;
    esac
fi

success_msg "${PROGRAM} finished!"
exit 0
