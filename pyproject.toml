[tool.poetry]
name = "rero-mef"
version = "0.15.0"
description = "Invenio digital library framework MEF."
authors = ["RERO <software@rero.ch>"]
license = "GNU Affero General Public License v3.0"

[tool.poetry.dependencies]
python = ">= 3.9, <3.10"
## Python packages dependencies (order matters)
#------------------------------------------------------------------------------
## Note: poetry evaluates the package constraints from the top to the bottom
## and respects only the last constraint to install the package.
## Thus the most strength constraint should be at the end.
## Imagine the following package list for the foo package with the
## most recent version equal to 5.0:
## A foo Pipfile example:
## ----------------------
## foo = ">1.0" # first will install 5.0
## foo = "==1.0" # then will downgrade to 1.0
## foo = ">3.0" # finally will upgrade to 5.0
## when the python code will be executed a conflict exception will be raised.
#------------------------------------------------------------------------------

## Third party inven## Third party invenio modules used by RERO EBOOKS
invenio-oaiharvester = { git = "https://github.com/inveniosoftware/invenio-oaiharvester.git", tag = "v1.0.0a4" }
invenio-search = {version = ">=2.1.0,<3.0.0", extras = ["elasticsearch7"]}

# Invenio core modules
invenio-app = ">=1.4.0,<2.0.0"
invenio-base = ">=1.3.0,<2.0.0"
invenio-cache = ">=1.1.1,<2.0.0"
invenio-celery = ">=1.2.5,<2.0.0"
invenio-config = ">=1.0.3,<2.0.0"
invenio-i18n = ">=2.0.0,<3.0.0"
invenio-db = {version = ">=1.1.0,<2.0.0", extras = ["postgresql"]}
# Invenio base bundle
invenio-admin = ">=1.4.0,<1.5.0"
invenio-assets = ">=3.0.0,<4.0.0"
invenio-formatter = ">=2.0.0,<3.0.0"
invenio-logging = {version = ">=2.0.0,<3.0.0"}
invenio-mail = ">=2.0.0,<3.0.0"
invenio-rest = ">=1.3.0,<2.0.0"
invenio-theme = ">=3.0.0,<4.0.0"
# Invenio auth bundle
invenio-access = ">=2.0.0,<3.0.0"
invenio-accounts = ">=5.0.0,<5.1.0"
invenio-oauth2server = ">=2.3.0,<3.0.0"
invenio-oauthclient = ">=4.0.0,<5.0.0"
invenio-userprofiles = ">=3.0.0,<4.0.0"
# Invenio metadata bundle
invenio-indexer = ">=2.2.0,<3.0.0"
invenio-jsonschemas = ">=1.1.4,<2.0.0"
invenio-oaiserver = ">=2.2.0,<3.0.0"
invenio-pidstore = ">=1.3.0,<2.0.0"
invenio-records-rest = ">=2.2.0,<3.0.0"
invenio-records-ui = ">=1.2.0,<2.0.0"
invenio-records = ">=2.1.0,<3.0.0"
#invenio-search-ui = ">=2.4.0,<3.0.0"
python-dotenv = ">=0.13.0"

# Default from Invenio
lxml = ">=4.9.1"
marshmallow = ">=3.0.0,<4.0.0"
uwsgi = ">=2.0"
uwsgi-tools = ">=1.1.1"
uwsgitop = ">=0.11"
# Pinned due to before_first_request deprecation https://flask.palletsprojects.com/en/2.2.x/api/#flask.Flask.before_first_request
Flask = ">=2.2.0,<2.3.0"
sentry-sdk = "<2.0.0"
dojson = ">=1.4.0"
# TODO: dojson problem = AttributeError: 'Group' object has no attribute 'resultcallback'
click = "<8.1.0"

## RERO ILS specific python modules
PyYAML = ">=5.3.1"
ijson = ">=2.5.1"
# problem with marcxml `leader`
pymarc = "<5.2.0"

## RERO ILS specific python modules
poethepoet = "*"
# TODO: solve requires invenio-indexer (<2.0.0)
rero-invenio-base = ">=0.2.0"
sqlitedict = "^2.1.0"
werkzeug = "<2.3.0"
sqlalchemy-continuum = ">=1.3.12,<1.4.0"

[tool.poetry.dev-dependencies]
## Python packages development dependencies (order matters)
#----------------------------------------------------------
## Default from Invenio
pytest-invenio = ">=2.1.0,<3.0.0"
pydocstyle = ">=6.1.1"
pytest-black = ">=0.3.2"
pytest-black-ng = ">=0.4.0"
Sphinx = ">=4.5.0"
## RERO ILS specific python packages
safety = ">=1.8,<3.0.0"
mock = ">=2.0.0"
autoflake = ">=1.3.1"
appnope = { version = "*", optional = true }

[tool.poetry.plugins."console_scripts"]
rero-ils = "invenio_app.cli:cli"

[tool.poetry.plugins."invenio_celery.tasks"]
rero_mef = "rero_mef.tasks"
agents = "rero_mef.agents.tasks"
concepts = "rero_mef.concepts.tasks"
places = "rero_mef.places.tasks"


[tool.poetry.plugins."invenio_assets.webpack"]
rero_mef_css = "rero_mef.theme.webpack:theme"

[tool.poetry.plugins."invenio_base.apps"]
rero-mef = "rero_mef.ext:REROMEFAPP"

[tool.poetry.plugins."invenio_base.blueprints"]
rero_mef = "rero_mef.theme.views:blueprint"

[tool.poetry.plugins."invenio_config.module"]
rero_mef = "rero_mef.config"

[tool.poetry.plugins."invenio_db.alembic"]
rero_mef = "rero_mef:alembic"

[tool.poetry.plugins."invenio_db.models"]
mef = "rero_mef.agents.mef.models"
viaf = "rero_mef.agents.viaf.models"
agents_gnd = "rero_mef.agents.gnd.models"
agents_idref = "rero_mef.agents.idref.models"
agents_rero = "rero_mef.agents.rero.models"
concepts_mef = "rero_mef.concepts.mef.models"
concepts_rero = "rero_mef.concepts.rero.models"
concepts_idref = "rero_mef.concepts.idref.models"
concepts_gnd = "rero_mef.concepts.gnd.models"
places_mef = "rero_mef.places.mef.models"
placets_idref = "rero_mef.places.idref.models"
placets_gnd = "rero_mef.places.gnd.models"

[tool.poetry.plugins."invenio_pidstore.minters"]
mef_id = "rero_mef.agents.mef.minters:mef_id_minter"
viaf_id = "rero_mef.agents.viaf.minters:viaf_id_minter"
agent_gnd_id = "rero_mef.agents.gnd.minters:gnd_id_minter"
agent_idref_id = "rero_mef.agents.idref.minters:idref_id_minter"
agent_rero_id = "rero_mef.agents.rero.minters:rero_id_minter"
concept_mef_id = "rero_mef.concepts.mef.minters:mef_id_minter"
concept_rero_id = "rero_mef.concepts.rero.minters:rero_id_minter"
concept_idref_id = "rero_mef.concepts.idref.minters:idref_id_minter"
concept_gnd_id = "rero_mef.concepts.gnd.minters:gnd_id_minter"
place_mef_id = "rero_mef.places.mef.minters:mef_id_minter"
place_idref_id = "rero_mef.places.idref.minters:idref_id_minter"
place_gnd_id = "rero_mef.places.gnd.minters:gnd_id_minter"

[tool.poetry.plugins."invenio_pidstore.fetchers"]
mef_id = "rero_mef.agents.mef.fetchers:mef_id_fetcher"
viaf_id = "rero_mef.agents.viaf.fetchers:viaf_id_fetcher"
agent_gnd_id = "rero_mef.agents.gnd.fetchers:gnd_id_fetcher"
agent_idref_id = "rero_mef.agents.idref.fetchers:idref_id_fetcher"
agent_rero_id = "rero_mef.agents.rero.fetchers:rero_id_fetcher"
concept_mef_id = "rero_mef.concepts.mef.fetchers:mef_id_fetcher"
concept_rero_id = "rero_mef.concepts.rero.fetchers:rero_id_fetcher"
concept_idref_id = "rero_mef.concepts.idref.fetchers:idref_id_fetcher"
concept_gnd_id = "rero_mef.concepts.gnd.fetchers:gnd_id_fetcher"
place_mef_id = "rero_mef.places.mef.fetchers:mef_id_fetcher"
place_idref_id = "rero_mef.places.idref.fetchers:idref_id_fetcher"
place_gnd_id = "rero_mef.places.gnd.fetchers:gnd_id_fetcher"

[tool.poetry.plugins."invenio_jsonschemas.schemas"]
common = "rero_mef.jsonschemas"
mef = "rero_mef.agents.mef.jsonschemas"
viaf = "rero_mef.agents.viaf.jsonschemas"
agents_gnd = "rero_mef.agents.gnd.jsonschemas"
agents_idref = "rero_mef.agents.idref.jsonschemas"
agents_rero = "rero_mef.agents.rero.jsonschemas"
cocepts_mef = "rero_mef.concepts.mef.jsonschemas"
cocepts_rero = "rero_mef.concepts.rero.jsonschemas"
cocepts_idref = "rero_mef.concepts.idref.jsonschemas"
cocepts_gnd = "rero_mef.concepts.gnd.jsonschemas"
places_mef = "rero_mef.places.mef.jsonschemas"
places_idref = "rero_mef.places.idref.jsonschemas"
places_gnd = "rero_mef.places.gnd.jsonschemas"

[tool.poetry.plugins."invenio_search.mappings"]
mef = "rero_mef.agents.mef.mappings"
viaf = "rero_mef.agents.viaf.mappings"
agents_gnd = "rero_mef.agents.gnd.mappings"
agents_idref = "rero_mef.agents.idref.mappings"
agents_rero = "rero_mef.agents.rero.mappings"
concepts_mef = "rero_mef.concepts.mef.mappings"
concepts_rero = "rero_mef.concepts.rero.mappings"
concepts_idref = "rero_mef.concepts.idref.mappings"
concepts_gnd = "rero_mef.concepts.gnd.mappings"
places_mef = "rero_mef.places.mef.mappings"
places_idref = "rero_mef.places.idref.mappings"
places_gnd = "rero_mef.places.gnd.mappings"

[tool.poetry.plugins."invenio_records.jsonresolver"]
mef = "rero_mef.agents.mef.jsonresolvers.mef_resolver"
viaf = "rero_mef.agents.viaf.jsonresolvers.viaf_resolver"
agents_gnd = "rero_mef.agents.gnd.jsonresolvers.gnd_resolver"
agents_idref = "rero_mef.agents.idref.jsonresolvers.idref_resolver"
agents_rero = "rero_mef.agents.rero.jsonresolvers.rero_resolver"
concepts_mef = "rero_mef.concepts.mef.jsonresolvers.mef_resolver"
concepts_rero = "rero_mef.concepts.rero.jsonresolvers.rero_resolver"
concepts_idref = "rero_mef.concepts.idref.jsonresolvers.idref_resolver"
concepts_gnd = "rero_mef.concepts.gnd.jsonresolvers.gnd_resolver"
places_mef = "rero_mef.places.mef.jsonresolvers.mef_resolver"
places_idref = "rero_mef.places.idref.jsonresolvers.idref_resolver"
places_gnd = "rero_mef.places.gnd.jsonresolvers.gnd_resolver"

[tool.poetry.plugins."invenio_base.api_blueprints"]
api_rero_mef = "rero_mef.theme.views:api_blueprint"
api_monitoring = "rero_mef.monitoring.views:api_blueprint"
api_blueprint = "rero_mef.views:api_blueprint"

[tool.poetry.plugins."flask.commands"]
fixtures = "rero_mef.cli:fixtures"
utils = "rero_mef.cli:utils"
celery = "rero_mef.cli:celery"
agents = "rero_mef.agents.cli:agents"
monitoring = "rero_mef.monitoring.cli:monitoring"

[tool.poetry.plugins."dojson.cli.rule"]

[tool.poetry.plugins."dojson.cli.dump"]
pjson = "rero_mef.dojson.utils:dump"

[tool.poe.tasks]
bootstrap = {cmd = "./scripts/bootstrap", help = "Runs bootstrap"}
console = {cmd = "./scripts/console", help = "Opens invenio shell"}
server = {cmd = "./scripts/server", help = "Starts the server "}
setup = {cmd = "./scripts/setup", help = "Runs setup"}
update = {cmd = "./scripts/update", help = "Runs update"}
run_tests = {cmd = "./scripts/test", help = "Runs all tests"}
tests = {cmd = "pytest", help = "pytest"}
tests_debug = {cmd = "pytest -s -vv --no-cov", help = "pytest -s -vv --no-cov"}

[tool.isort]
profile = "black"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
