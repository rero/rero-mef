# -*- coding: utf-8 -*-
#
# This file is part of RERO MEF.
# Copyright (C) 2018 RERO.
#
# RERO MEF is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# RERO MEF is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with RERO MEF; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
# In applying this license, RERO does not
# waive the privileges and immunities granted to it by virtue of its status
# as an Intergovernmental Organization or submit itself to any jurisdiction.

# This nginx configuration defines two servers, one on port 80 and one on port
# 443. All traffix on port 80 is redirect to port 443 on SSL.
#
# Nginx proxies all requests on port 443 to upstream the application server
# which is expected to be running on port 5000/5001.

upstream ui_server {
  server localhost:5000 fail_timeout=0;
}
upstream api_server {
  server localhost:5001 fail_timeout=0;
}

# The geo block assigns a value of 0 to $limit for IP addresses
# in the whitelist and 1 for all others
geo $limit {
    default 1;
    10.0.0.0/8 0;
    192.168.0.0/24 0;
}

# use a map to translate geo values into a key
map $limit $limit_key {
    0 "";
    1 $binary_remote_addr;
}

# Putting the two together, $limit_key is set to an empty string for
# whitelisted IP addresses, and to the clientâ€™s IP address otherwise
# When the first parameter to the limit_req_zone directory (the key) is an
# empty string, the limit is not applied, so whitelisted IP addresses
# (in the 10.0.0.0/8 and 192.168.0.0/24 subnets) are not limited.
# All other IP addresses are limited to 6 requests per second.
limit_req_zone $limit_key zone=req_zone:10m rate=6r/s;

# HTTP server
server {
  # Redirects all requests to https. - this is in addition to HAProxy which
  # already redirects http to https. This redirect is needed in case you access
  # the server directly (e.g. useful for debugging).
  listen 80; # IPv4
  listen [::]:80; # IPv6
  server_name _;
  return 301 https://$host$request_uri;
}

# HTTPS server
server {
  listen 443 ssl; # IPv4
  listen [::]:443 ssl; # IPv6
  server_name _;
  charset utf-8;
  keepalive_timeout 5;

  # SSL configuration according to best practices from
  # https://mozilla.github.io/server-side-tls/ssl-config-generator/
  # The provided certificate (test.crt) and private key (test.key) is only for
  # testing and must never be used in production environment.
  ssl_certificate /etc/ssl/certs/test.crt;
  ssl_certificate_key /etc/ssl/private/test.key;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  # Accepted protocols and ciphers
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;

  add_header Strict-Transport-Security "max-age=15768000"; # 6 months

  # The request body is sent to the proxied server immediately as it is
  # received
  proxy_request_buffering off;
  # Sets the HTTP protocol v1.1 for proxying in order to not use the buffer
  # in case of chunked transfer encoding
  proxy_http_version 1.1;

  # Proxying to the application server
  # Two locations are defined in order to allow large file uploads in the files
  # API without exposing the other parts of the application to receive huge
  # request bodies.
  location / {
    limit_req zone=req_zone burst=10 nodelay;
    uwsgi_pass ui_server;
    include uwsgi_params;
    uwsgi_buffering off;
    uwsgi_request_buffering off;
    uwsgi_param Host $host;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $scheme;
    # Max upload size (except for files) is set to 100mb as default.
    client_max_body_size 100m;
  }
  location /api {
    limit_req zone=req_zone burst=10 nodelay;
    uwsgi_pass api_server;
    include uwsgi_params;
    uwsgi_buffering off;
    uwsgi_request_buffering off;
    uwsgi_param Host $host;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $scheme;
    # Max upload size (except for files) is set to 100mb as default.
    client_max_body_size 100m;
  }

  # Static content is served directly by nginx and not the application server.
  location /static {
    limit_req zone=req_zone burst=10 nodelay;
    alias /invenio/instance/static;
    autoindex off;
  }
}
