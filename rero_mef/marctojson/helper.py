# -*- coding: utf-8 -*-
#
# RERO MEF
# Copyright (C) 2020 RERO
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

"""Helper."""

import contextlib
import copy
import os
import re

# ---------------------------- Modules ----------------------------------------

LANGUAGES = {
    "aar": 1,
    "abk": 1,
    "ace": 1,
    "ach": 1,
    "ada": 1,
    "ady": 1,
    "afa": 1,
    "afh": 1,
    "afr": 1,
    "ain": 1,
    "aka": 1,
    "akk": 1,
    "alb": 1,
    "ale": 1,
    "alg": 1,
    "alt": 1,
    "amh": 1,
    "ang": 1,
    "anp": 1,
    "apa": 1,
    "ara": 1,
    "arc": 1,
    "arg": 1,
    "arm": 1,
    "arn": 1,
    "arp": 1,
    "art": 1,
    "arw": 1,
    "asm": 1,
    "ast": 1,
    "ath": 1,
    "aus": 1,
    "ava": 1,
    "ave": 1,
    "awa": 1,
    "aym": 1,
    "aze": 1,
    "bad": 1,
    "bai": 1,
    "bak": 1,
    "bal": 1,
    "bam": 1,
    "ban": 1,
    "baq": 1,
    "bas": 1,
    "bat": 1,
    "bej": 1,
    "bel": 1,
    "bem": 1,
    "ben": 1,
    "ber": 1,
    "bho": 1,
    "bih": 1,
    "bik": 1,
    "bin": 1,
    "bis": 1,
    "bla": 1,
    "bnt": 1,
    "bos": 1,
    "bra": 1,
    "bre": 1,
    "btk": 1,
    "bua": 1,
    "bug": 1,
    "bul": 1,
    "bur": 1,
    "byn": 1,
    "cad": 1,
    "cai": 1,
    "car": 1,
    "cat": 1,
    "cau": 1,
    "ceb": 1,
    "cel": 1,
    "cha": 1,
    "chb": 1,
    "che": 1,
    "chg": 1,
    "chi": 1,
    "chk": 1,
    "chm": 1,
    "chn": 1,
    "cho": 1,
    "chp": 1,
    "chr": 1,
    "chu": 1,
    "chv": 1,
    "chy": 1,
    "cmc": 1,
    "cnr": 1,
    "cop": 1,
    "cor": 1,
    "cos": 1,
    "cpe": 1,
    "cpf": 1,
    "cpp": 1,
    "cre": 1,
    "crh": 1,
    "crp": 1,
    "csb": 1,
    "cus": 1,
    "cze": 1,
    "dak": 1,
    "dan": 1,
    "dar": 1,
    "day": 1,
    "del": 1,
    "den": 1,
    "dgr": 1,
    "din": 1,
    "div": 1,
    "doi": 1,
    "dra": 1,
    "dsb": 1,
    "dua": 1,
    "dum": 1,
    "dut": 1,
    "dyu": 1,
    "dzo": 1,
    "efi": 1,
    "egy": 1,
    "eka": 1,
    "elx": 1,
    "eng": 1,
    "enm": 1,
    "epo": 1,
    "est": 1,
    "ewe": 1,
    "ewo": 1,
    "fan": 1,
    "fao": 1,
    "fat": 1,
    "fij": 1,
    "fil": 1,
    "fin": 1,
    "fiu": 1,
    "fon": 1,
    "fre": 1,
    "frm": 1,
    "fro": 1,
    "frr": 1,
    "frs": 1,
    "fry": 1,
    "ful": 1,
    "fur": 1,
    "gaa": 1,
    "gay": 1,
    "gba": 1,
    "gem": 1,
    "geo": 1,
    "ger": 1,
    "gez": 1,
    "gil": 1,
    "gla": 1,
    "gle": 1,
    "glg": 1,
    "glv": 1,
    "gmh": 1,
    "goh": 1,
    "gon": 1,
    "gor": 1,
    "got": 1,
    "grb": 1,
    "grc": 1,
    "gre": 1,
    "grn": 1,
    "gsw": 1,
    "guj": 1,
    "gwi": 1,
    "hai": 1,
    "hat": 1,
    "hau": 1,
    "haw": 1,
    "heb": 1,
    "her": 1,
    "hil": 1,
    "him": 1,
    "hin": 1,
    "hit": 1,
    "hmn": 1,
    "hmo": 1,
    "hrv": 1,
    "hsb": 1,
    "hun": 1,
    "hup": 1,
    "iba": 1,
    "ibo": 1,
    "ice": 1,
    "ido": 1,
    "iii": 1,
    "ijo": 1,
    "iku": 1,
    "ile": 1,
    "ilo": 1,
    "ina": 1,
    "inc": 1,
    "ind": 1,
    "ine": 1,
    "inh": 1,
    "ipk": 1,
    "ira": 1,
    "iro": 1,
    "ita": 1,
    "jav": 1,
    "jbo": 1,
    "jpn": 1,
    "jpr": 1,
    "jrb": 1,
    "kaa": 1,
    "kab": 1,
    "kac": 1,
    "kal": 1,
    "kam": 1,
    "kan": 1,
    "kar": 1,
    "kas": 1,
    "kau": 1,
    "kaw": 1,
    "kaz": 1,
    "kbd": 1,
    "kha": 1,
    "khi": 1,
    "khm": 1,
    "kho": 1,
    "kik": 1,
    "kin": 1,
    "kir": 1,
    "kmb": 1,
    "kok": 1,
    "kom": 1,
    "kon": 1,
    "kor": 1,
    "kos": 1,
    "kpe": 1,
    "krc": 1,
    "krl": 1,
    "kro": 1,
    "kru": 1,
    "kua": 1,
    "kum": 1,
    "kur": 1,
    "kut": 1,
    "lad": 1,
    "lah": 1,
    "lam": 1,
    "lao": 1,
    "lat": 1,
    "lav": 1,
    "lez": 1,
    "lim": 1,
    "lin": 1,
    "lit": 1,
    "lol": 1,
    "loz": 1,
    "ltz": 1,
    "lua": 1,
    "lub": 1,
    "lug": 1,
    "lui": 1,
    "lun": 1,
    "luo": 1,
    "lus": 1,
    "mac": 1,
    "mad": 1,
    "mag": 1,
    "mah": 1,
    "mai": 1,
    "mak": 1,
    "mal": 1,
    "man": 1,
    "mao": 1,
    "map": 1,
    "mar": 1,
    "mas": 1,
    "may": 1,
    "mdf": 1,
    "mdr": 1,
    "men": 1,
    "mga": 1,
    "mic": 1,
    "min": 1,
    "mis": 1,
    "mkh": 1,
    "mlg": 1,
    "mlt": 1,
    "mnc": 1,
    "mni": 1,
    "mno": 1,
    "moh": 1,
    "mon": 1,
    "mos": 1,
    "mul": 1,
    "mun": 1,
    "mus": 1,
    "mwl": 1,
    "mwr": 1,
    "myn": 1,
    "myv": 1,
    "nah": 1,
    "nai": 1,
    "nap": 1,
    "nau": 1,
    "nav": 1,
    "nbl": 1,
    "nde": 1,
    "ndo": 1,
    "nds": 1,
    "nep": 1,
    "new": 1,
    "nia": 1,
    "nic": 1,
    "niu": 1,
    "nno": 1,
    "nob": 1,
    "nog": 1,
    "non": 1,
    "nor": 1,
    "nqo": 1,
    "nso": 1,
    "nub": 1,
    "nwc": 1,
    "nya": 1,
    "nym": 1,
    "nyn": 1,
    "nyo": 1,
    "nzi": 1,
    "oci": 1,
    "oji": 1,
    "ori": 1,
    "orm": 1,
    "osa": 1,
    "oss": 1,
    "ota": 1,
    "oto": 1,
    "paa": 1,
    "pag": 1,
    "pal": 1,
    "pam": 1,
    "pan": 1,
    "pap": 1,
    "pau": 1,
    "peo": 1,
    "per": 1,
    "phi": 1,
    "phn": 1,
    "pli": 1,
    "pol": 1,
    "pon": 1,
    "por": 1,
    "pra": 1,
    "pro": 1,
    "pus": 1,
    "que": 1,
    "raj": 1,
    "rap": 1,
    "rar": 1,
    "roa": 1,
    "roh": 1,
    "rom": 1,
    "rum": 1,
    "run": 1,
    "rup": 1,
    "rus": 1,
    "sad": 1,
    "sag": 1,
    "sah": 1,
    "sai": 1,
    "sal": 1,
    "sam": 1,
    "san": 1,
    "sas": 1,
    "sat": 1,
    "scn": 1,
    "sco": 1,
    "sel": 1,
    "sem": 1,
    "sga": 1,
    "sgn": 1,
    "shn": 1,
    "sid": 1,
    "sin": 1,
    "sio": 1,
    "sit": 1,
    "sla": 1,
    "slo": 1,
    "slv": 1,
    "sma": 1,
    "sme": 1,
    "smi": 1,
    "smj": 1,
    "smn": 1,
    "smo": 1,
    "sms": 1,
    "sna": 1,
    "snd": 1,
    "snk": 1,
    "sog": 1,
    "som": 1,
    "son": 1,
    "sot": 1,
    "spa": 1,
    "srd": 1,
    "srn": 1,
    "srp": 1,
    "srr": 1,
    "ssa": 1,
    "ssw": 1,
    "suk": 1,
    "sun": 1,
    "sus": 1,
    "sux": 1,
    "swa": 1,
    "swe": 1,
    "syc": 1,
    "syr": 1,
    "tah": 1,
    "tai": 1,
    "tam": 1,
    "tat": 1,
    "tel": 1,
    "tem": 1,
    "ter": 1,
    "tet": 1,
    "tgk": 1,
    "tgl": 1,
    "tha": 1,
    "tib": 1,
    "tig": 1,
    "tir": 1,
    "tiv": 1,
    "tkl": 1,
    "tlh": 1,
    "tli": 1,
    "tmh": 1,
    "tog": 1,
    "ton": 1,
    "tpi": 1,
    "tsi": 1,
    "tsn": 1,
    "tso": 1,
    "tuk": 1,
    "tum": 1,
    "tup": 1,
    "tur": 1,
    "tut": 1,
    "tvl": 1,
    "twi": 1,
    "tyv": 1,
    "udm": 1,
    "uga": 1,
    "uig": 1,
    "ukr": 1,
    "umb": 1,
    "und": 1,
    "urd": 1,
    "uzb": 1,
    "vai": 1,
    "ven": 1,
    "vie": 1,
    "vol": 1,
    "vot": 1,
    "wak": 1,
    "wal": 1,
    "war": 1,
    "was": 1,
    "wel": 1,
    "wen": 1,
    "wln": 1,
    "wol": 1,
    "xal": 1,
    "xho": 1,
    "yao": 1,
    "yap": 1,
    "yid": 1,
    "yor": 1,
    "ypk": 1,
    "zap": 1,
    "zbl": 1,
    "zen": 1,
    "zha": 1,
    "znd": 1,
    "zul": 1,
    "zun": 1,
    "zxx": 1,
    "zza": 1,
}

COUNTRIES = {
    "aa": 1,
    "abc": 1,
    "ac": 1,
    "aca": 1,
    "ae": 1,
    "af": 1,
    "ag": 1,
    "ai": 1,
    "air": 1,
    "aj": 1,
    "ajr": 1,
    "aku": 1,
    "alu": 1,
    "am": 1,
    "an": 1,
    "ao": 1,
    "aq": 1,
    "aru": 1,
    "as": 1,
    "at": 1,
    "au": 1,
    "aw": 1,
    "ay": 1,
    "azu": 1,
    "ba": 1,
    "bb": 1,
    "bcc": 1,
    "bd": 1,
    "be": 1,
    "bf": 1,
    "bg": 1,
    "bh": 1,
    "bi": 1,
    "bl": 1,
    "bm": 1,
    "bn": 1,
    "bo": 1,
    "bp": 1,
    "br": 1,
    "bs": 1,
    "bt": 1,
    "bu": 1,
    "bv": 1,
    "bw": 1,
    "bwr": 1,
    "bx": 1,
    "ca": 1,
    "cau": 1,
    "cb": 1,
    "cc": 1,
    "cd": 1,
    "ce": 1,
    "cf": 1,
    "cg": 1,
    "ch": 1,
    "ci": 1,
    "cj": 1,
    "ck": 1,
    "cl": 1,
    "cm": 1,
    "cn": 1,
    "co": 1,
    "cou": 1,
    "cp": 1,
    "cq": 1,
    "cr": 1,
    "cs": 1,
    "ctu": 1,
    "cu": 1,
    "cv": 1,
    "cw": 1,
    "cx": 1,
    "cy": 1,
    "cz": 1,
    "dcu": 1,
    "deu": 1,
    "dk": 1,
    "dm": 1,
    "dq": 1,
    "dr": 1,
    "ea": 1,
    "ec": 1,
    "eg": 1,
    "em": 1,
    "enk": 1,
    "er": 1,
    "err": 1,
    "es": 1,
    "et": 1,
    "fa": 1,
    "fg": 1,
    "fi": 1,
    "fj": 1,
    "fk": 1,
    "flu": 1,
    "fm": 1,
    "fp": 1,
    "fr": 1,
    "fs": 1,
    "ft": 1,
    "gau": 1,
    "gb": 1,
    "gd": 1,
    "ge": 1,
    "gg": 1,
    "gh": 1,
    "gi": 1,
    "gl": 1,
    "gm": 1,
    "gn": 1,
    "go": 1,
    "gp": 1,
    "gr": 1,
    "gs": 1,
    "gsr": 1,
    "gt": 1,
    "gu": 1,
    "gv": 1,
    "gw": 1,
    "gy": 1,
    "gz": 1,
    "hiu": 1,
    "hk": 1,
    "hm": 1,
    "ho": 1,
    "ht": 1,
    "hu": 1,
    "iau": 1,
    "ic": 1,
    "idu": 1,
    "ie": 1,
    "ii": 1,
    "ilu": 1,
    "im": 1,
    "inu": 1,
    "io": 1,
    "iq": 1,
    "ir": 1,
    "is": 1,
    "it": 1,
    "iu": 1,
    "iv": 1,
    "iw": 1,
    "iy": 1,
    "ja": 1,
    "je": 1,
    "ji": 1,
    "jm": 1,
    "jn": 1,
    "jo": 1,
    "ke": 1,
    "kg": 1,
    "kgr": 1,
    "kn": 1,
    "ko": 1,
    "ksu": 1,
    "ku": 1,
    "kv": 1,
    "kyu": 1,
    "kz": 1,
    "kzr": 1,
    "lau": 1,
    "lb": 1,
    "le": 1,
    "lh": 1,
    "li": 1,
    "lir": 1,
    "ln": 1,
    "lo": 1,
    "ls": 1,
    "lu": 1,
    "lv": 1,
    "lvr": 1,
    "ly": 1,
    "mau": 1,
    "mbc": 1,
    "mc": 1,
    "mdu": 1,
    "meu": 1,
    "mf": 1,
    "mg": 1,
    "mh": 1,
    "miu": 1,
    "mj": 1,
    "mk": 1,
    "ml": 1,
    "mm": 1,
    "mnu": 1,
    "mo": 1,
    "mou": 1,
    "mp": 1,
    "mq": 1,
    "mr": 1,
    "msu": 1,
    "mtu": 1,
    "mu": 1,
    "mv": 1,
    "mvr": 1,
    "mw": 1,
    "mx": 1,
    "my": 1,
    "mz": 1,
    "na": 1,
    "nbu": 1,
    "ncu": 1,
    "ndu": 1,
    "ne": 1,
    "nfc": 1,
    "ng": 1,
    "nhu": 1,
    "nik": 1,
    "nju": 1,
    "nkc": 1,
    "nl": 1,
    "nm": 1,
    "nmu": 1,
    "nn": 1,
    "no": 1,
    "np": 1,
    "nq": 1,
    "nr": 1,
    "nsc": 1,
    "ntc": 1,
    "nu": 1,
    "nuc": 1,
    "nvu": 1,
    "nw": 1,
    "nx": 1,
    "nyu": 1,
    "nz": 1,
    "ohu": 1,
    "oku": 1,
    "onc": 1,
    "oru": 1,
    "ot": 1,
    "pau": 1,
    "pc": 1,
    "pe": 1,
    "pf": 1,
    "pg": 1,
    "ph": 1,
    "pic": 1,
    "pk": 1,
    "pl": 1,
    "pn": 1,
    "po": 1,
    "pp": 1,
    "pr": 1,
    "pt": 1,
    "pw": 1,
    "py": 1,
    "qa": 1,
    "qea": 1,
    "quc": 1,
    "rb": 1,
    "re": 1,
    "rh": 1,
    "riu": 1,
    "rm": 1,
    "ru": 1,
    "rur": 1,
    "rw": 1,
    "ry": 1,
    "sa": 1,
    "sb": 1,
    "sc": 1,
    "scu": 1,
    "sd": 1,
    "sdu": 1,
    "se": 1,
    "sf": 1,
    "sg": 1,
    "sh": 1,
    "si": 1,
    "sj": 1,
    "sk": 1,
    "sl": 1,
    "sm": 1,
    "sn": 1,
    "snc": 1,
    "so": 1,
    "sp": 1,
    "sq": 1,
    "sr": 1,
    "ss": 1,
    "st": 1,
    "stk": 1,
    "su": 1,
    "sv": 1,
    "sw": 1,
    "sx": 1,
    "sy": 1,
    "sz": 1,
    "ta": 1,
    "tar": 1,
    "tc": 1,
    "tg": 1,
    "th": 1,
    "ti": 1,
    "tk": 1,
    "tkr": 1,
    "tl": 1,
    "tma": 1,
    "tnu": 1,
    "to": 1,
    "tr": 1,
    "ts": 1,
    "tt": 1,
    "tu": 1,
    "tv": 1,
    "txu": 1,
    "tz": 1,
    "ua": 1,
    "uc": 1,
    "ug": 1,
    "ui": 1,
    "uik": 1,
    "uk": 1,
    "un": 1,
    "unr": 1,
    "up": 1,
    "ur": 1,
    "us": 1,
    "utu": 1,
    "uv": 1,
    "uy": 1,
    "uz": 1,
    "uzr": 1,
    "vau": 1,
    "vb": 1,
    "vc": 1,
    "ve": 1,
    "vi": 1,
    "vm": 1,
    "vn": 1,
    "vp": 1,
    "vra": 1,
    "vs": 1,
    "vtu": 1,
    "wau": 1,
    "wb": 1,
    "wea": 1,
    "wf": 1,
    "wiu": 1,
    "wj": 1,
    "wk": 1,
    "wlk": 1,
    "ws": 1,
    "wvu": 1,
    "wyu": 1,
    "xa": 1,
    "xb": 1,
    "xc": 1,
    "xd": 1,
    "xe": 1,
    "xf": 1,
    "xga": 1,
    "xh": 1,
    "xi": 1,
    "xj": 1,
    "xk": 1,
    "xl": 1,
    "xm": 1,
    "xn": 1,
    "xna": 1,
    "xo": 1,
    "xoa": 1,
    "xp": 1,
    "xr": 1,
    "xra": 1,
    "xs": 1,
    "xv": 1,
    "xx": 1,
    "xxc": 1,
    "xxk": 1,
    "xxr": 1,
    "xxu": 1,
    "ye": 1,
    "ykc": 1,
    "ys": 1,
    "yu": 1,
    "za": 1,
}

COUNTRY_UNIMARC_MARC21 = {
    "AD": "an",
    "AE": "ts",
    "AF": "af",
    "AG": "aq",
    "AI": "am",
    "AL": "aa",
    "AM": "ai",
    "AO": "ao",
    "AQ": "ay",
    "AR": "ag",
    "AS": "as",
    "AT": "au",
    "AU": "at",
    "AUT": "at",
    "AW": "aw",
    "AZ": "aj",
    "BA": "bn",
    "BB": "bb",
    "BD": "bg",
    "BE": "be",
    "BF": "uv",
    "BG": "bu",
    "BH": "ba",
    "BI": "bd",
    "BJ": "dm",
    "BL": "sc",
    "BM": "bm",
    "BN": "bx",
    "BO": "bo",
    "BR": "bl",
    "BS": "bf",
    "BT": "bt",
    "BV": "bv",
    "BW": "bs",
    "BZ": "bh",
    "CA": "xxc",
    "CC": "xb",
    "CD": "cf",
    "CF": "cx",
    "CG": "cg",
    "CH": "sz",
    "CI": "iv",
    "CK": "cw",
    "CL": "cl",
    "CM": "cm",
    "CN": "cc",
    "CO": "ck",
    "CR": "cr",
    "CU": "cu",
    "CW": "co",
    "CX": "xa",
    "CY": "cy",
    "DE": "gw",
    "DJ": "ft",
    "DK": "dk",
    "DM": "dq",
    "DZ": "ae",
    "EC": "ec",
    "EE": "er",
    "EG": "ua",
    "EH": "ss",
    "ER": "ea",
    "ES": "sp",
    "ET": "et",
    "FI": "fi",
    "FJ": "fj",
    "FM": "fm",
    "FO": "fa",
    "FR": "fr",
    "GA": "go",
    "GB": "xxk",
    "GD": "gd",
    "GE": "gau",
    "GF": "fg",
    "GG": "gg",
    "GH": "gh",
    "GI": "gi",
    "GL": "gl",
    "GM": "gm",
    "GN": "gv",
    "GP": "gp",
    "GQ": "eg",
    "GR": "gr",
    "GS": "xs",
    "GT": "gt",
    "GU": "gu",
    "GW": "pg",
    "GY": "gy",
    "HM": "hm",
    "HN": "ho",
    "HR": "ci",
    "HT": "ht",
    "HU": "hu",
    "ID": "io",
    "IE": "ie",
    "IL": "is",
    "IM": "im",
    "IN": "ii",
    "IQ": "iq",
    "IR": "ir",
    "IS": "ic",
    "IT": "it",
    "JE": "je",
    "JM": "jm",
    "JO": "jo",
    "JP": "ja",
    "KE": "ke",
    "KG": "kg",
    "KH": "cb",
    "KI": "gb",
    "KM": "cq",
    "KN": "xd",
    "KP": "kn",
    "KR": "ko",
    "KW": "ku",
    "KY": "cj",
    "KZ": "kz",
    "LA": "ls",
    "LB": "le",
    "LC": "xk",
    "LI": "lh",
    "LK": "ce",
    "LR": "lb",
    "LS": "lo",
    "LT": "li",
    "LU": "lu",
    "LV": "lv",
    "LY": "ly",
    "MA": "mr",
    "MC": "mc",
    "MD": "mv",
    "ME": "mo",
    "MG": "mg",
    "MH": "xe",
    "MK": "xn",
    "ML": "ml",
    "MM": "br",
    "MN": "mp",
    "MP": "nw",
    "MQ": "mq",
    "MR": "mu",
    "MS": "mj",
    "MT": "mm",
    "MU": "mf",
    "MV": "xc",
    "MW": "mw",
    "MX": "mx",
    "MY": "my",
    "MZ": "mz",
    "NA": "sx",
    "NC": "nl",
    "NE": "ng",
    "NF": "nx",
    "NG": "nr",
    "NI": "nq",
    "NL": "ne",
    "NO": "no",
    "NP": "np",
    "NR": "nu",
    "NU": "xh",
    "NZ": "nz",
    "OM": "mk",
    "PA": "pn",
    "PE": "pe",
    "PF": "fp",
    "PG": "pp",
    "PH": "ph",
    "PK": "pk",
    "PL": "pl",
    "PM": "xl",
    "PN": "pc",
    "PR": "pr",
    "PT": "po",
    "PW": "pw",
    "PY": "py",
    "QA": "qa",
    "RE": "re",
    "RO": "rm",
    "RU": "ru",
    "RW": "rw",
    "SA": "su",
    "SB": "bp",
    "SC": "se",
    "SD": "sj",
    "SE": "sw",
    "SG": "si",
    "SH": "xj",
    "SI": "xv",
    "SK": "xo",
    "SL": "sl",
    "SM": "st",
    "SN": "sg",
    "SO": "so",
    "SR": "sr",
    "SS": "sd",
    "ST": "sf",
    "SV": "es",
    "SX": "sn",
    "SZ": "sq",
    "TC": "tc",
    "TD": "cd",
    "TF": "fs",
    "TG": "tg",
    "TH": "th",
    "TJ": "ta",
    "TK": "tl",
    "TL": "em",
    "TM": "tk",
    "TN": "ti",
    "TO": "to",
    "TR": "tu",
    "TT": "tr",
    "TV": "tv",
    "TZ": "tz",
    "UA": "un",
    "UG": "ug",
    "US": "xxu",
    "UY": "uy",
    "UZ": "uz",
    "VA": "vc",
    "VC": "xm",
    "VE": "ve",
    "VN": "vm",
    "VU": "nn",
    "WF": "wf",
    "WS": "ws",
    "XX": "xx",
    "YE": "ye",
    "YT": "ot",
    "ZA": "sa",
    "ZM": "za",
    "ZW": "rh",
}

LANGUAGE_SCRIPTS = [
    "ara-arab",
    "ara-latn",
    "arm-armn",
    "arm-latn",
    "awa-deva",
    "awa-latn",
    "bel-cyrl",
    "bel-latn",
    "bho-deva",
    "bho-latn",
    "bra-deva",
    "bra-latn",
    "chi-hani",
    "chi-latn",
    "chi-zyyy",
    "chu-cyrl",
    "chu-latn",
    "doi-deva",
    "doi-latn",
    "eng-latn",
    "fre-latn",
    "geo-geor",
    "geo-latn",
    "ger-latn",
    "grc-grek",
    "grc-latn",
    "gre-grek",
    "gre-latn",
    "heb-hebr",
    "heb-latn",
    "hin-deva",
    "hin-latn",
    "ita-latn",
    "jpn-hani",
    "jpn-hrkt",
    "jpn-jpan",
    "jpn-latn",
    "kas-deva",
    "kas-latn",
    "kok-deva",
    "kok-latn",
    "kor-kore",
    "kor-latn",
    "lad-hebr",
    "lad-latn",
    "mac-cyrl",
    "mac-latn",
    "mag-deva",
    "mag-latn",
    "mai-deva",
    "mai-latn",
    "mar-deva",
    "mar-latn",
    "mun-deva",
    "mun-latn",
    "nep-deva",
    "nep-latn",
    "per-arab",
    "per-latn",
    "pli-deva",
    "pli-latn",
    "pra-deva",
    "pra-latn",
    "raj-deva",
    "raj-latn",
    "rus-cyrl",
    "rus-latn",
    "san-deva",
    "san-latn",
    "sat-deva",
    "sat-latn",
    "snd-deva",
    "snd-latn",
    "srp-cyrl",
    "srp-latn",
    "tam-taml",
    "tam-latn",
    "tha-thai",
    "tha-latn",
    "ukr-cyrl",
    "ukr-latn",
    "und-arab",
    "und-cyrl",
    "und-grek",
    "und-hani",
    "und-hebr",
    "und-jpan",
    "und-kore",
    "und-latn",
    "und-zyyy",
    "yid-hebr",
    "yid-latn",
]


# ---------------------------- Functions --------------------------------------
def file_name(file_name):
    """Gets the filename without extention."""
    return ".".join(os.path.basename(file_name).split(".")[:-1])


def replace_ctrl(text):
    """Replaces control characters with symbols."""
    newtext = ""
    for c in text:
        if ord(c) <= 0x20:
            c = chr(0x2400 + ord(c))
        # stopwords
        if ord(c) == 0x9C:
            c = "|"
        newtext += c
    # text = text.replace('\n', u'␊')
    # text = text.replace('\r', u'␍')
    # text = text.replace('\t', u'␉')
    # text = text.replace( ' ', u'␠')
    return newtext


def nice_field(field, ctrl=False, tab=False):
    """Changes MARC21 strings to more visible strings 1Fa -> $a with tag."""
    res = ""
    with contextlib.suppress(Exception):
        res = (
            "tag[%s]\t%s" % (field.tag, nice_marc_field(field, ctrl, tab))
            if tab
            else f"tag[{field.tag}] {nice_marc_field(field, ctrl, tab)}"
        )
    return res


def nice_marc_field(field, ctrl=False, tab=False):
    """Changes MARC21 strings to more visible strings 1Fa -> $a."""
    res = ""
    field = copy.deepcopy(field)
    with contextlib.suppress(Exception):
        if field.is_control_field():
            data = replace_ctrl(field.data) if ctrl else field.data
            res = "  \t" + data if tab else f"   {data}"
        else:
            res = ""
            # make indicator 1 nicer
            res = field.indicator1 if field.indicator1 != " " else "_"
            # make indicator 2 nicer
            res += field.indicator2 if field.indicator2 != " " else "_"
            # make subfields nicer
            for subfield in field:
                sub_data = subfield[1]
                if ctrl:
                    res += (
                        "\t$" + subfield[0] + "\t" + replace_ctrl(sub_data)
                        if tab
                        else f" ${subfield[0]} {replace_ctrl(sub_data)}"
                    )
                else:
                    if subfield[0] == "6":
                        sub_data = "%-9s" % sub_data
                    if tab:
                        res += "\t$" + subfield[0] + "\t" + sub_data
                    else:
                        res += f" ${subfield[0]} {sub_data}"
    return res


def nice_record(record, ctrl=False):
    """Make nice MARC record."""
    leader = record.leader
    if ctrl:
        leader = replace_ctrl(leader)
    nice = f"ldr: {leader}"
    for field in record:
        nice += f"{field.tag}: {nice_marc_field(field, ctrl)}" + "\n"
    return nice


def display_record(record, ctrl=False):
    """Displays the record pymarc like."""
    print(nice_record(record, ctrl))


def remove_trailing_punctuation(data, punctuation=",", spaced_punctuation=":;/-"):
    """Remove trailing punctuation from data.

    The punctuation parameter list the
    punctuation characters to be removed
    (preceded by a space or not).

    The spaced_punctuation parameter list the
    punctuation characters needing one or more preceding space(s)
    in order to be removed.
    """
    return re.sub(
        r"([{0}]|\s+[{1}])$".format(punctuation, spaced_punctuation), "", data.rstrip()
    ).rstrip()


def build_string_from_field(
    field, subfields, punctuation=",", spaced_punctuation=":;/-", tag_grouping=None
):
    """Build a string (one per field).

    from the given field tag and given subfields.
    the given separator is used as subfields delimiter.
    """
    if not field:
        return
    if not tag_grouping:
        tag_grouping = []
    grouping_data = []
    grouping_code = []
    for code, data in field:
        if code in subfields:
            if isinstance(data, (list, set)):
                data = subfields[code].join(data)
            data = data.replace("\x98", "")
            data = data.replace("\x9C", "")
            data = data.replace(",,", ",")
            data = remove_trailing_punctuation(
                data=data,
                punctuation=punctuation,
                spaced_punctuation=spaced_punctuation,
            )
            if data := data.strip():
                for group in tag_grouping:
                    if code in group["subtags"]:
                        code = group["subtags"]
                if grouping_code and code == grouping_code[-1]:
                    grouping_data[-1].append(data)
                else:
                    grouping_code.append(code)
                    grouping_data.append([data])
    subfield_string = ""
    for group in zip(grouping_code, grouping_data):
        grouping_start = ""
        grouping_end = ""
        delimiter = subfields.get(group[0])
        subdelimiter = subfields.get(group[0])
        for grouping in tag_grouping:
            if group[0] == grouping["subtags"]:
                grouping_start = grouping.get("start", "")
                grouping_end = grouping.get("end", "")
                delimiter = grouping.get("delimiter", "")
                subdelimiter = grouping.get("subdelimiter", "")

        if subfield_string:
            subfield_string += (
                delimiter + grouping_start + subdelimiter.join(group[1]) + grouping_end
            )
        else:
            subfield_string = (
                grouping_start + subdelimiter.join(group[1]) + grouping_end
            )
    return subfield_string.strip()


def build_string_list_from_fields(
    record,
    tag,
    subfields,
    punctuation=",",
    spaced_punctuation=":;/-",
    tag_grouping=None,
):
    """Build a list of strings (one per field).

    from the given field tag and given subfields.
    the given separator is used as subfields delimiter.
    """
    if not tag_grouping:
        tag_grouping = []
    field_string_list = []
    for field in record.get_fields(tag):
        if subfield_string := build_string_from_field(
            field=field,
            subfields=subfields,
            punctuation=punctuation,
            spaced_punctuation=spaced_punctuation,
            tag_grouping=tag_grouping,
        ):
            field_string_list.append(subfield_string.strip())
    return field_string_list


def as_marc(field):
    """Docstring."""
    return field.as_marc(encoding="utf-8").decode("utf-8")


def has_roman_number(string, befor="", after=""):
    """Find all roman numbers in string before.

    string befor roman numbers after: string behind roman number.
    """
    re_roman_number = re.compile(
        f"({befor}"
        + r"M{0,3}(?:CM|CD|D?C{0,3})(?:XC|XL|L?X{0,3})(?:IX|IV|V?I{0,3})"
        + after
        + ")"
    )
    roman_numbers = re_roman_number.findall(string)
    return [roman_number for roman_number in roman_numbers if roman_number]
